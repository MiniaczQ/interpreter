// list comperhansion

// lista jest pełnoprawna

// brak mutowalności list

// silny, statyczny

M = [1, 0, 0, 0, 1, 0, 1, 1, 1, 0]; // definicje stałych
A = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
B = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];

C = A + B * M // operacje per element
// [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]

D = A -> [0] -> B // łączenie łańcuchowe
// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]


// funkcje i warunki
// funkcje działają na elementach tabel?
// bardziej yield
fn max(a: int = 0, b: int = 0) {
    if a < b {
        yield b;
    } else {
        yield a;
    }
}

A[0..2] // podlista
// [0, 1, 2]


// podlisty + pętle? (iteracja oknem)
// zagnieżdżone listy?

























Types:
    string
    integer
    float
    bool

Special type:
    list<>

Code block:
{}

Variables:
the <> = <>;

Condition:
if () {} else {}

Ignore expression:
;

Loop:
for <> in <> {}

Operands:
    +
    -
    *
    /
    &&
    ||
    





































